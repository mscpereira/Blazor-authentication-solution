@page "/signIn"
@using Blazored.LocalStorage
@using Client.Providers

<h3>Sign in</h3>

@if (_signInSuccessful == false)
{
    <EditForm Model="_userTosignIn" OnValidSubmit="signInUser">
        <DataAnnotationsValidator />
        <div class="form-group my-3">
            <label for="email">Email address</label>
            <InputText @bind-Value="_userTosignIn.EmailAddress" id="email" class="form-control" />
            <ValidationMessage For="@(() => _userTosignIn.EmailAddress)" />
        </div>
        <div class="form-group my-3">
            <label for="password">Password</label>
            <InputText @bind-Value="_userTosignIn.Password" type="password" id="password" class="form-control" />
            <ValidationMessage For="@(() => _userTosignIn.Password)" />
        </div>

        <ValidationSummary />

        <button type="submit" class="btn btn-primary btn-lg">Sign in</button>

        @if (_attemptTosignInFailed == true)
        {
            <p class="my-3 text-danger">Sign in failed. Please check your username and/ or password and try again</p>
        }
    </EditForm>
}
else
{
    <h4>Sign in successful! Press the button below to go to the fetch data page.</h4>
    <a href="/fetchdata" class="btn btn-primary btn-lg">Fetch data</a>
}


@code {
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    private User _userTosignIn = new() { EmailAddress = "user@example.com", Password = "Password1!" };
    private bool _signInSuccessful = false;
    private bool _attemptTosignInFailed = false;

    private async Task signInUser()
    {
        _attemptTosignInFailed = false;

        HttpResponseMessage httpResponseMessage = await HttpClient.PostAsJsonAsync("https://localhost:7200/api/user/signIn", _userTosignIn);

        if (httpResponseMessage.IsSuccessStatusCode) 
        {
            string jsonWebToken = await httpResponseMessage.Content.ReadAsStringAsync();
            await LocalStorageService.SetItemAsync("bearerToken", jsonWebToken);
            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", jsonWebToken);
            _signInSuccessful = true;
        }
        else
        {
            _attemptTosignInFailed = true;
        }
    }
}